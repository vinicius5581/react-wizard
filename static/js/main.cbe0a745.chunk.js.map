{"version":3,"sources":["components/StepBtn.js","components/StepsNav.js","components/StepRenderer.js","components/Alert.js","components/Wizard.js","components/DoSomething.js","components/DoSomethingElse.js","components/DoOneMoreThing.js","components/App.js","serviceWorker.js","index.js"],"names":["StepBtn","_ref","stepName","stepNumber","isCurrent","goToStep","react_default","a","createElement","className","concat","onClick","StepsNav","steps","currentStepIdx","handlePrevStepBtn","handleNextStepBtn","map","step","idx","src_components_StepBtn","key","id","name","StepRenderer","this","props","children","React","Component","Alert","msg","clear","Wizard","state","_this","Object","objectSpread","status","error","length","setState","markAsComplete","prevState","clearError","_this$state","src_components_StepsNav","components_StepRenderer","cloneElement","component","currentStep","currentIdx","src_components_Alert","DoSomething","DoSomethingElse","DoOneMoreThing","components_DoSomething","components_DoSomethingElse","components_DoOneMoreThing","App","src_components_Wizard","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cbe0a745.chunk.js","sourcesContent":["import React from 'react';\nimport './StepBtn.css';\n\nconst StepBtn = ({stepName, stepNumber, isCurrent, goToStep}) => (\n    <button \n        className={`stepBtn ${isCurrent && 'current'}`}\n        onClick={() => goToStep(stepNumber)}\n    >\n        Step {stepNumber + 1} - {stepName}\n    </button>                                        \n);\n\nexport default StepBtn;","import React from 'react';\nimport StepBtn from './StepBtn';\nimport './StepsNav.css';\n\nconst StepsNav = ({\n    steps, \n    currentStepIdx, \n    handlePrevStepBtn, \n    handleNextStepBtn, \n    goToStep\n}) => (   \n    <nav className='stepsNav'>          \n        <button className='previous' onClick={handlePrevStepBtn}>{'<<'}</button>  \n        <div className='stepsBtns'>\n            {steps.map((step, idx) => {\n                return (                \n                    <StepBtn \n                        key={step.id}\n                        isCurrent={currentStepIdx === idx}\n                        stepName={step.name}\n                        stepNumber={idx}\n                        goToStep={goToStep}                    \n                    />\n                )\n            })} \n        </div>                         \n        <button className='next' onClick={handleNextStepBtn}>{'>>'}</button>                             \n    </nav>\n)\n\nexport default StepsNav;","import React from 'react';\n\nclass StepRenderer extends React.Component {\n    render() {\n        return (            \n            <main>\n                {this.props.children}\n            </main>\n        )\n    }\n}\n\nexport default StepRenderer;","import React from 'react';\nimport './Alert.css';\n\nconst Alert = ({msg, clear}) => (\n    <div className=\"alert\">\n        <div>\n            <button onClick={clear}>X</button>\n            <h1>{msg}</h1>\n        </div>        \n    </div>  \n);\n\nexport default Alert;","import React from 'react';\nimport StepsNav from './StepsNav';\nimport StepRenderer from './StepRenderer';\nimport Alert from './Alert';\nimport './Wizard.css';\n\nclass Wizard extends React.Component {\n    state = {\n        currentStepIdx: 0,\n        steps: this.props.steps.map(step => ({status: 'pending', ...step})),\n        error: null\n    }\n\n    goToStep = stepNumber => {\n        const {steps} = this.state;\n        if (\n                stepNumber >= 0 && \n                stepNumber < steps.length  && \n                (steps[stepNumber].status !== 'pending' || (\n                    stepNumber > 0 && \n                    steps[stepNumber - 1].status !== 'pending'\n                ))\n            ) {\n            this.setState({currentStepIdx: stepNumber})\n        } else {\n            this.setState({error: 'You need to complete this step prior to jump to next one'})\n        }\n    }\n\n    handleNextStepBtn = () => { \n        this.goToStep(this.state.currentStepIdx + 1)\n    }\n\n    handlePrevStepBtn = () => {\n        this.goToStep(this.state.currentStepIdx - 1)\n    }    \n\n    markAsComplete = stepNumber => {\n        this.setState(prevState => ({steps: prevState.steps.map((step,idx) => {\n            if (stepNumber === idx) {\n                return {...step, status: 'complete'}\n            }\n            return step\n        }),\n        error: null\n    }))\n    }\n\n    clearError = () => {\n        this.setState({error: null})\n    }\n\n    render() {\n        const {steps, currentStepIdx, error} = this.state;\n        return (\n            <div className='wizard'>\n                <header>\n                    <StepsNav \n                        steps={steps}\n                        handlePrevStepBtn={this.handlePrevStepBtn}\n                        handleNextStepBtn={this.handleNextStepBtn}\n                        goToStep={this.goToStep}\n                        currentStepIdx={currentStepIdx}\n                    />\n                </header>\n                <StepRenderer>\n                    {React.cloneElement(this.props.steps[currentStepIdx].component, {\n                        markAsComplete: this.markAsComplete,\n                        currentStep: steps[currentStepIdx],\n                        currentIdx: currentStepIdx\n                    })}\n                </StepRenderer>\n                {error && (<Alert msg={error} clear={this.clearError} />)}\n            </div>\n        )\n    }\n}\n\nexport default Wizard;","import React from 'react';\n\nconst DoSomething = ({markAsComplete, currentIdx, currentStep}) => (\n    <div>\n        <h1>{currentStep.name}</h1>\n        <p>{currentStep.status}</p>\n        <button onClick={() => markAsComplete(currentIdx)}>Mark as complete</button>\n    </div>  \n);\n\nexport default DoSomething;","import React from 'react';\n\nconst DoSomethingElse = ({markAsComplete, currentIdx, currentStep}) => (\n    <div>\n        <h1>{currentStep.name}</h1>\n        <p>{currentStep.status}</p>\n        <button onClick={() => markAsComplete(currentIdx)}>Mark as complete</button>\n    </div>  \n);\n\nexport default DoSomethingElse;","import React from 'react';\n\nconst DoOneMoreThing = ({markAsComplete, currentIdx, currentStep}) => (\n    <div>\n        <h1>{currentStep.name}</h1>\n        <p>{currentStep.status}</p>\n        <button onClick={() => markAsComplete(currentIdx)}>Mark as complete</button>\n    </div>  \n);\n\nexport default DoOneMoreThing;","import React, { Component } from 'react';\nimport Wizard from './Wizard';\nimport DoSomething from './DoSomething';\nimport DoSomethingElse from './DoSomethingElse';\nimport DoOneMoreThing from './DoOneMoreThing';\nimport './App.css';\n\nconst steps = [\n  {id: 1, name: 'Do something', component: <DoSomething />},\n  {id: 2, name: 'Do something else', component: <DoSomethingElse />},\n  {id: 3, name: 'Do whatever', component: <DoOneMoreThing />, status: 'complete'},\n  {id: 4, name: 'Do whatever', component: <DoOneMoreThing />},\n]\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Wizard \n          steps={steps}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}